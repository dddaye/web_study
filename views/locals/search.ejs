<div class="row my-5">
    <div class="col">
        <h1 class="text-center">지역검색</h1>
        <div class="row mb-2 justify-content-end">
            <form name="frm" class="col-6 col-m-4 col-lg-3">
                <div class="input-group">
                    <input name="query" class="form-control" value="인하대학교">
                    <button class="btn btn-primary">검색</button>
                </div>
            </form>
        </div>
        <hr>
        <div id="div_locals"></div>

        <div class="text-center">
            <button id="prev" class="btn btn-primary">이전</button>
            <span id="span_page" class="mx-3">1/10</span>
            <button id="next" class="btn btn-primary">다음</button>
        </div>
    </div>
</div>

<!-- each로 반복하는 documents를 this에 가져옴 f12해보면 local="[object Object]"-->
<!-- local="{{toString @this}}에서 toString은 함수 toString 가져오고 @this는 function(local)에 local을 가져옴--> 
<script type="x-handlebars-template" id="temp_locals">
    <table class="table">
        {{#each documents}}
        <tr>
            <td>{{place_name}}</td> 
            <td>{{address_name}}</td>
            <td>{{phone}}</td>
            <td><button class="btn btn-primary btn-sm" local="{{toString @this}}">즐겨찾기</button></td>
        </tr>
        {{/each}}
    </table>
</script>

<script>
    Handlebars.registerHelper("toString", function(local){
    return JSON.stringify(local); //object -> string으로 변환
});
</script>

<script type="module">
    import {app} from '/javascripts/firebaseInit.js';
    import {getDatabase, ref, set, get} from "https://www.gstatic.com/firebasejs/10.4.0/firebase-database.js";
    // getDatabase=데이터베이스가져와 / ref=어디에 쓸건지 주소 / set=쓰기 / get=장바구니에 이미 있는지 확인하려고 get으로 읽음
    const db=getDatabase(app); //데이터베이스를 db에 가져와 설정파일이 app에 있으니까 ()안에 app

    // form 내에서 이름이 query인 입력 필드 선택 후 값을 읽어와서 query변수에 저장
    let query=$(frm.query).val();
    let page=1;

    getLocals(); // 초기상태 설정 

    // 폼이 제출될 때 아래 함수 실행
    $(frm).on("submit", function(e){
        e.preventDefault(); // 폼이 제출되야 페이지가 로드되거나 다른동작을 수행(기본 동작을 막음)
        query=$(frm.query).val(); //qurey라는 이름을 가진 필드값을 가져와서 query 변수에 저장(검색쿼리로 사용)
        page=1; // 페이지번호 1로 설정 -> 검색 결과의 현재 페이지를 나타냄
        getLocals(); // getLocals 함수 호출(서버로 검색 요청 보내고 검색 결과 화면에 표시)
    });

    // 즐겨찾기 버튼을 클릭한 경우
    $("#div_locals").on("click", ".btn", async function(){
        //alert("클릭클릭");
        if(!sessionStorage.getItem("uid")){ //로그인이 안되어있을 때
            alert("로그인이 필요합니다.")
            //타켓을 세션스토리지에서 꺼내서 타겟이 있으면 타겟으로 이동, 없으면 로그인창으로 이동
            sessionStorage.setItem("target", "/locals"); 
            location.href="/users/login";
        }else{ //로그인이 된 경우
            const local = JSON.parse($(this).attr("local")) //여기서 this는 .btn
            // JSON.parse 써서 string -> object로 변환
            //console.log(local)
            const ref_local = `favorite/${sessionStorage.getItem("uid")}/${local.id}`;
            const snapshot = await get(ref(db, ref_local));
            //async await 안해주면 가져올때 비동기식(get)이여서 엄청 느리기 때문에 가져오기전에 다른거 가져올 수 있어서 기다리라는거임
            //console.log(snapshot.val());
            if(snapshot.val()){
                alert("이미 즐겨찾기에 등록되어 있습니다.")
            }else{
                await set(ref(db, ref_local), local);
                alert("즐겨찾기에 등록되었습니다.");
            }
        }
    });

    //다음 버튼을 클릭한 경우
    $("#next").on("click", function(){
        page++;
        getLocals();
    });

    //이전 버튼을 클릭한 경우
    $("#prev").on("click", function(){
        page--;
        getLocals();
    })

    // 주소검색 데이터 불러오기
    function getLocals(){ //getLocals()함수 -> 페이지가 로드될때 주소 목록을 가져옴
        $.ajax({
            type:"get",
            url:"https://dapi.kakao.com/v2/local/search/keyword.json",
            headers:{"Authorization":"KakaoAK f23e7e2e27ac02c8ef22fe940b70cfd0"},
            data:{query:query, page:page, size:5}, // query:검색어 page:검색결과 페이지 번호 / size:한페이지에 다섯개보여줌
            success:function(data){ //ajax 성공하면 실행되는 함수
                let temp=Handlebars.compile($("#temp_locals").html()); //템플릿 + 데이터 결합
                $("#div_locals").html(temp(data)); // 컴파일된 템플릿 data 적용해서 html만들고 div_books에 보여줘

                // 검색 결과 페이지의 번호 및 총페이지수를 계산하고 html 문서에 업데이트
                let last=Math.ceil(data.meta.pageable_count/5); // pageable_count(검색결과의 총 개수)/5 -> ceil(올림) -> last에 저장 
                $("#span_page").html(page + '/' + last); // 페이지 번호와 총 페이지 수를 #span_page에 업데이트

                if(page == 1) $("#prev").attr("disabled", true); // page ==1인지 먼저 확인 -> 첫번쨰 페이지면 버튼 비활성화
                else $("#prev").attr("disabled", false); // 첫번째 아니면 버튼 활성화 (이전페이지로 이동 가능)

                if(data.meta.is_end) $("#next").attr("disabled", true); // data객체 내의 is_end 속성 확인(마지막페이지 여부를 나타내는 논리값) -> 마지막이면 버튼 비활성
                else $("#next").attr("disabled", false); // 마지막 페이지 아니면 버튼 활성화
            }
        });
    }
</script>