<style>
    #photo {
        width: 200px;
        border-radius: 50%;
        cursor: pointer;
        border: 1px solid gray;
    }
    #file{
        display: none;
    }
</style>

<div class="my-5">
    <h1 class="text-center mb-5">마이페이지</h1>
    <div class="row justify-content-center">
        <div class="col-8">
            <div class="text-center my-5">
                <img id ="photo" scr="https://via.placeholder.com/200x200"/>
                <input id="file" type="file">
                <div>
                    <button id="btn-photo" class="btn btn-primary px-5 mt-2">이미지 저장</button>
                </div>
            </div>
            <form name="frm" class="card p-3">
                <div class="input-group mb-2">
                    <span class="input-group-text">이름</span>
                    <input name="name" class="form-control"/>
                </div>
                <div class="input-group mb-2">
                    <span class="input-group-text">전화</span>
                    <input name="phone" class="form-control"/>
                </div>
                <div class="input-group mb-2">
                    <span class="input-group-text">주소</span>
                    <input name="address" class="form-control" readonly>
                    <button id="btn-search" class="btn btn-primary" type="button">검색</button>
                </div>
                <div class="text-center mt-3">
                    <button class="btn btn-primary px-5">저장</button>
                    <button class="btn btn-secondary px-5" type="reset">취소</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script type="module">
    import {app} from "/javascripts/firebaseInit.js"
    import {getFirestore, setDoc, doc, getDoc} from "https://www.gstatic.com/firebasejs/10.4.0/firebase-firestore.js";
    import {getStorage, uploadBytes, ref, getDownloadURL} from "https://www.gstatic.com/firebasejs/10.4.0/firebase-storage.js";
    
    const db = getFirestore(app);
    const uid = sessionStorage.getItem("uid");
    const email = sessionStorage.getItem("email");
    const storage = getStorage(app);

    let user;
    $(window).on("load", async function(){ //window 페이지가 열릴 때 실행

        //Firestore에서 특정 사용자 정보 가져오기
        const snapshot = await getDoc(doc(db, `users/${uid}`));

        //만약 정보가 저장되어 있다면
        if(snapshot.data()){
            user=snapshot.data(); // 사용자 데이터를 가져와서 user 변수에 할당
            $(frm.name).val(user.name); //채워지는 정보들
            $(frm.phone).val(user.phone);
            $(frm.address).val(user.address);
            const photo = user.photo ? user.photo : "http://via.placeholder.com/200x200";
            $("#photo").attr("src", photo);
        }
        //console.log(snapshot.data())
    });

    // 이미지 저장버튼을 눌렀을 때
    $("#btn-photo").on("click", async function(){
        if($("#file").val()==""){ // 이미지선택 되지 않으면 알림 표시
            alert("저장할 사진을 선택하세요.");
        }else{
            if(confirm("선택한 이미지를 저장하실래요?")){
                //console.log("...................", user)
                //업로드해서 스냅샷 변수에 넣어주기 ([0].files[0] 내가 선택한 파일만 업로드됨)
                const snapshot = await uploadBytes(ref(storage, `/photo/${Date.now()}.jpg`),$("#file")[0].files[0]);
                //업로드 된 이미지의 다운로드 URL을 가져옴
                const url = await getDownloadURL(snapshot.ref);
                // Firestore의 "users" 컬렉션에서 현재 사용자 문서(users/${uid})를 가져와서 
                // 이미지 URL을 포함한 사용자 정보를 업데이트
                await setDoc(doc(db, `users/${uid}`), {...user, photo:url})
                alert("이미지가 저장되었습니다.")
            }
        }
    })

    // 파일 값이 변경되면
    $("#file").on("change", function(e){
        // (e.target.files[0])에 대한 URL을 생성
        // 이 URL을 이미지 요소(#photo)의 src 속성에 할당
        // URL.createObjectURL(e.target.files[0]): 선택한 파일에 대한 Blob URL을 생성
        // 이 URL은 브라우저에서 파일을 로드하고 표시하는 데 사용
        $("#photo").attr("src", URL.createObjectURL(e.target.files[0])) //이미지 미리보기 갱신
    });

    // 이미지 클릭
    $("#photo").on("click", function(){
        $("#file").click(); //file클릭
    });

    $(frm).on("submit", async function(e){
        e.preventDefault();
        const name=$(frm.name).val();
        const phone=$(frm.phone).val();
        const address=$(frm.address).val();

        if(name == ""){
            alert("이름이 입력되지 않았습니다.")
            $(frm.name).focus();
            return;
        }
        if(phone == ""){
            alert("전화번호가 입력되지 않았습니다.")
            $(frm.phone).focus();
            return;
        }

        if(address == ""){
            alert("주소가 입력되지 않았습니다")
            return;
        }

        if(confirm("정보를 저장하시겠습니까?")){
            await setDoc(doc(db, `users/${uid}`),{ //db는 파이어스토어
                email:email,
                name:name,
                phone:phone,
                address:address
            });
            alert("사용자 정보가 변경되었습니다.");
            location.href="/"
        }
    });

    // 주소 검색 버튼 클릭시
    $("#btn-search").on("click", function(){
        new daum.Postcode({ // 우편번호 서비스 API
            oncomplete:function(data){ //주소 클릭시 data 매개변수로 들어옴(콜백함수 정의)
                //console.log(data);
                const address = data.roadAddress; // 도로명 주소 추출
                // 선택한 주소의 건물 이름이 있으면 괄호로 묶어서 building 변수에 저장
                // 없으면 빈 문자열 저장
                const building=data.buildingName ? `(${data.buildingName})` : "";
                // 주소와 건물정보 합쳐서 frm에 주소 필드 설정
                $(frm.address).val(address + building)
            }
        }).open(); //open 안해주면 모달 안열림
    })



</script>